"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import django_on_heroku # top of the file
import dj_database_url
from dotenv import load_dotenv
from pathlib import Path

import requests
import os

def fetch_database_url(app_name, heroku_api_key):
    """
    Fetches the DATABASE_URL environment variable for a given Heroku app.

    Parameters:
    app_name (str): Name of the Heroku app.
    heroku_api_key (str): API key for Heroku account.

    Returns:
    str: The DATABASE_URL if successful, else an error message.
    """
    headers = {
        "Authorization": f"Bearer {heroku_api_key}",
        "Accept": "application/vnd.heroku+json; version=3"
    }

    response = requests.get(f"https://api.heroku.com/apps/{app_name}/config-vars", headers=headers)

    if response.status_code == 200:
        db_url = response.json().get("DATABASE_URL", "")
        return db_url
    else:
        return "Failed to fetch DATABASE_URL"





# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r)chv55ybk_=63p(7m+1#mgtun@p@*m(p^7ae0!+r-+0t_=#wj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django_light',
    'drf_yasg',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'corsheaders',
    'api'

]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}


CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_ALL_HEADERS = True
# CORS_ALLOWED_ORIGINS = ['http://localhost:3000'] # react front end server location

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'front_end/build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
ROOT_URL = "http://127.0.0.1:8000/api"
load_dotenv()
DATABASE_ENV = os.getenv('DATABASE_ENV')
DJANGO_ENV = os.getenv('DJANGO_ENV')


# 1 local django with local db
if (DATABASE_ENV == 'local') and (DJANGO_ENV == 'local'):
    print("Using local database")
    ROOT_URL = "http://127.0.0.1:8000/api"
    # Local (SQLite) - Use the local SQLite database configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# 2 local django with remote db. need to make api call to get db url
elif (DATABASE_ENV == 'remote') and (DJANGO_ENV == 'local'):
    app_name = "vibely"  
    heroku_api_key = "fe31462d-e9d0-4e23-84c0-36f40b2979b4" 
    # Fetch the database URL using the Heroku API
    db_url = fetch_database_url(app_name, heroku_api_key)
    ROOT_URL = "https://vibely-23b7dc4c736d.herokuapp.com/api"
    DATABASES = {'default': dj_database_url.config(default=db_url)}
    
# 3 local django with remote db
else:
    print("Using remote db")
    ROOT_URL = "https://vibely-23b7dc4c736d.herokuapp.com/api"
    DATABASE_URL = os.getenv('DATABASE_URL')
    DATABASE_URL = os.environ.get('DATABASE_URL')  # from the heroku machine
    DATABASES = {'default': dj_database_url.config(default=DATABASE_URL)}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'front_end/build/static'),  # Path to where the React static files are
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Where Django collects static files

django_on_heroku.settings(locals()) # bottom of the file
